'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('babel-polyfill');

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A utility class, nothing to see here, keep moving.
 * 2018
 *
 * Use of this source code is governed by a MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 *
 * @author Alexandre Moraes | github.com/alcmoraes
 * 
 */
var Utils = function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  _createClass(Utils, [{
    key: 'areCoordinatesDistantEnough',


    /**
     * Compare two coordinates and determine if they're
     * distant enough to trigger the animation routine
     *
     * @param {L.LatLng} coord_one The first coordinate
     * @param {L.LatLng} coord_two The coordinate to compare
     * @return {boolean}
     */
    value: function areCoordinatesDistantEnough(coord_one, coord_two) {
      return JSON.stringify(coord_one.lat.toString().substring(8, 3)) !== JSON.stringify(coord_two.lat.toString().substring(8, 3));
    }

    /**
     * Animate a leaflet element marker between two coordinates
     *
     * @param {L} leafletElement The leaflet element from marker
     * @param {L.LatLng} coordFrom The coordinate to go from
     * @param {L.LatLng} coordTo The coordinate to go to
     */

  }, {
    key: 'animateMarker',
    value: function animateMarker(leafletElement, coordFrom, coordTo) {
      var position = void 0;
      var movingInterval = void 0;
      var curLat = coordFrom.lat;
      var curLng = coordFrom.lng;
      var newLat = coordTo.lat;
      var newLng = coordTo.lng;
      var threshold = 0.01;
      movingInterval = setInterval(function () {
        if (threshold >= 1) clearInterval(movingInterval);
        position = new _leaflet2.default.LatLng(curLat + (newLat - curLat) * threshold, curLng + (newLng - curLng) * threshold);
        leafletElement.setLatLng(position);
        threshold += 0.1;
      }, 400);
    }
  }]);

  return Utils;
}();

exports.default = new Utils();